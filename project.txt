# MongoDB 기초 및 개념

1. MongoDB는 어떤 유형의 데이터베이스이며, 어떤 형식으로 데이터를 저장합니까? MongoDB의 스키마 특성에 대해 설명하세요.
  -> 오픈 소스 문서 지향 데이터베이스이며, Document를 기반으로 데이터를 저장하고 관리한다.

2. MongoDB에서 문서(Document)와 컬렉션(Collection)의 개념을 설명하고, SQL에서 테이블(Table)과의 차이점을 비교하세요.
  -> document: 하나의 레코드, BSON으로 이루어져 있음.
     Collection: Document의 모음. SQL 테이블과 흡사함.
     sql 테이블은 데이터의 구조가 고정되어 있지만 MongoDB의 컬렉션은 데이터 구조가 고정된 형식으로 정의되어 있지 않는다.

3. MongoDB에서 스키마리스(Schemaless) 데이터베이스의 장점과 단점을 설명하세요.
  -> 장: 데이터의 구조를 유연하게 설계할 수 있고, 빠르게 변하는 데이터 요구에 대응하기 좋음.
     단: 스키마가 유연하기 때문에 데이터 무결성을 보장하기 어려움. 데이터 정합성이나 일관성을 유지하기 위해서는 추가적인 작업이 필요함.

4. MongoDB의 주요 특징 중 수평적 확장성에 대해 설명하고, 샤딩(Sharding)이 어떻게 수평적 확장을 지원하는지 서술하세요.
  -> 수평적 확장은 데이터 크기와 트래픽이 증가함에 따라 서버를 추가하여 성능을 향상시키는 방식이다. 데이터를 여러 DB에 분할하여 수평적으로 확장시킨다.

5. MongoDB에서 BSON(Binary JSON) 형식이 사용되는 이유와 이 형식의 주요 특징에 대해 설명하세요.
  -> 기계어로 변환되기 때문에 속도가 빠르다.
     다양한 데이터 타입을 지원하기 때문에 MongoDB에서 사용하는 데이터의 종류를 다양화하고 효율적으로 저장할 수 있다.

# MongoDB 트랜잭션 관련

1. MongoDB에서 멀티 도큐먼트 트랜잭션(Multi-Document Transaction)이 무엇이며, 어떻게 작동하는지 설명하세요.
  -> MongoDB 4.0 버전부터 지원하기 시작한 기능으로 ACID 속성을 보장하며, 관계형 데이터베이스의 트랜잭션과 유사한 방식으로 여러 문서 간의 트랜잭션 처리를 가능하게 해준다.
    트랜잭션은 세션 내에서 실행되며, 트랜잭션이 성공하면 commitTransaaction()으로 완료하고, 실패하면 abortTransaction()으로 취소할 수 있다.

2. MongoDB 트랜잭션의 ACID 속성(Atomicity, Consistency, Isolation, Durability)에 대해 설명하고, 각 속성이 트랜잭션에서 어떤 역할을 하는지 서술하세요.**
  -> Atomicity(원자성) - 전부 다 성공하거나 전부 실패해야 함.
     Consistency(일관성) - 트랜잭션이 완료되면 데이터베이스는 항상 일관된 상태로 유지됨.
     Isolation(격리성) - 트랜잭션이 완료되기 전까지 다른 트랜잭션에 영향을 주면 안됨.
     Durability(지속성) - 트랜잭션이 완료되면 그 결과는 영구적으로 데이터베이스에 저장됨.

3. M**ongoDB 트랜잭션 사용 시, 데이터 일관성을 보장하기 위해 사용하는 `commitTransaction()`과 `abortTransaction()` 메서드의 역할을 설명하세요.
  -> commitTransaction() : 트랜잭션을 커밋할 때 호출. 다중 문서 트랜잭션에서 작업으로 인한 변경 사항을 저장하고 트랜잭션을 종료한다.
     abortTransaction() : 트랜잭션을 롤백할 때 호출. 다중 문서 트랜잭션을 종료하고 트랜잭션 내 작업으로 인해 변경된 모든 데이터를 롤백한다.

4. MongoDB에서 트랜잭션을 사용할 수 있는 환경을 설명하고, 단일 인스턴스에서 트랜잭션이 가능한지 여부를 기술하세요.
  ->  replica set 또는 sharded cluster 환경이 필요하고, 단일 인스턴스에서는 MongoDB 트랜잭션을 사용할 수 없다.

5. MongoDB에서 트랜잭션을 구현한 예시 코드를 제시하고, 각 단계별로 동작 방식을 설명하세요.
  -> import {MongoClient} from 'mongodb';

     const uri = 'mongodb://localhost:27017'; //몽고DB 연결 uri
     const client = new MongoClient(uri);

     async function runTransaction(){
      const session = client.startSession(); //트랜잭션 시작 세션 생성
      const usersCollection = client.db('bank').collection('users');
      const accountsCollection = client.db('bank').collection('accounts');

      // 트랜잭션 시작
      session.startTransaction();

      try{
        // 송금자 계좌에서 100 차감
        await accountsCollection.updateOne(
          {accountId: '1234'},
          {$inc: {balance: -100}},
          {session}
        );

        //수신자 계좌에 100 추가
        await accountsCollection.updateOne(
          {accountId:'5678'},
          {$inc: {balance: 100}},
          {session}
        );

        // 트랜잭션 커밋 (성공 시)
        await session.commitTransaction();
        console.log('Transaction successfully committed.');
      } catch (error){
        // 오류 발생 시 트랜잭션 롤백
        await session.abortTransaction();
        console.localhost('Transaction aborted due to an error: ', error);
      } finally{
        //세션 종료
        session.endSession();
        await client.close();
      }
     }

     runTransaction().catch(console.error);
  
# 샤딩(Sharding) 관련

1. MongoDB에서 샤딩(Sharding)이란 무엇이며, 이를 통해 데이터베이스 성능을 어떻게 최적화할 수 있는지 설명하세요.
  -> 샤딩이란 데이터를 여러 서버에 분산하여 저장하는 방식이다. 샤드 키를 통해 데이터베이스 성능을 최적화 할 수 있다.

2. MongoDB에서 샤드 키(Shard Key)의 역할과, 샤드 키를 선택할 때 고려해야 할 요소들을 설명하세요.
  -> 샤드 키에 의해 샤딩에서 데이터를 분배하는 방식이 결정된다. 
     샤드 키 선택시 고려 사항 : 샤드 키의 카디널리티, 샤드 키 값이 발생하는 빈도, 쿼리 패턴 샤딩 등
    https://www.mongodb.com/ko-kr/docs/manual/core/sharding-choose-a-shard-key/#std-label-shard-key-range

3. MongoDB에서 샤딩 구조의 주요 구성 요소(샤드, 쿼리 라우터, 컨피그 서버)를 설명하고, 각 구성 요소가 어떻게 상호작용하는지 서술하세요.
  -> 샤드 - 실제 데이터를 저장하는 데이터베이스. 각 샤드는 전체 데이터의 일부를 저장하며, 샤드는 자체적으로 레플리카 세트로 구성될 수 있음.
     쿼리 라우터 - MongoS라는 프로세스가 쿼리 라우터 역할을 함. 클라이언트가 MongoDB에 요청을 보낼 때, 쿼리 라우터는 어떤 샤드가 해당 데이터를 가지고 있는지 결정하고 쿼리를 적절한 샤드에 전달함.
     컨피그 서버 - 클러스터에서 데이터가 각 샤드에 어떻게 분배되는지를 추적하는 메타데이터를 저장함. 각 샤드가 어떤 데이터 범위를 가지고 있는지 관리한다.

4. MongoDB에서 Range-based Sharding과 Hash-based Sharding의 차이점을 설명하고, 각각의 장단점을 비교하세요.
  -> Range-based Sharding: 샤드 키의 값 범위에 따라 데이터를 분할함. 증설작업에 드는 비용이 크지 않음
     Hash-based Sharding: 샤드 키 값을 해싱하여 데이터를 분산함. 데이터가 균등하게 분산됨, 샤드를 추가하거나 삭제하기 쉬움.

5. MongoDB에서 샤딩의 장점과 단점을 설명하고, 샤딩이 적합한 상황과 그렇지 않은 상황에 대해 논하세요.
  -> 장: 수평적 확장이 가능하고, 데이터를 분산 저장하기 때문에 시스템 처리 성능이 향상됨.
     단: 샤딩을 설정, 관리하는데 복잡하고 샤딩을 사용할 경우 더 많은 서버가 필요하므로 운영 비용이 증가할 수 있음.
     대규모 데이터베이스, 높은 트래픽 처리, 성능 최적화를 해야할 경우 샤딩을 사용한다.

# 레플리카 세트(Replica Set) 관련

1. MongoDB에서 레플리카 세트(Replica Set)란 무엇이며, 이 기능을 사용하는 주된 목적에 대해 설명하세요.
  -> 동일한 데이터를 가진 여러 MongoDB 인스턴스를 말한다.
     서비스 중인 MongoDB 인스턴스에 문제가 생겼을 경우, Replica Set의 구성원 중의 하나인 복제 노드가 장애 노드를 즉시 대체한다.

2. MongoDB 레플리카 세트의 구성 요소인 Primary, Secondary, Arbiter의 역할과 동작 방식을 설명하세요.
  -> Primary : 데이터의 읽기와 쓰기 작업을 처리하는 메인 서버. 클라이언트는 기본적으로 Primary 서버로 연결되어 데이터를 삽입하거나 업데이트 한다.
     Secondary : Primary 서버에서 발생한 모든 데이터를 복제하는 서버. 읽기 작업만 처리하며, Primary에 장애가 발생하면 자동으로 승격됨.
     Arbiter : Primary와 Secondary에서 데이터가 어디를 향해야 하는지 더 빠르게 결정을 도와줌.

3. MongoDB에서 레플리카 세트를 사용하는 경우, Primary 서버에 장애가 발생했을 때 어떤 과정으로 장애를 복구하는지 서술하세요.
  -> Primary서버가 다운되면, Replica Set는 자동으로 하나의 Secondary 서버를 새로운 Primary 서버로 승격시킨다. 클라이언트는 새롭게 승격된 Primary서버로 자동 전환된다.

4. MongoDB에서 Secondary 서버를 활용한 읽기 작업 분산이 무엇인지 설명하고, 이 방법이 읽기 성능에 어떤 영향을 미치는지 논하세요.
  -> Secondary 서버를 읽기 작업 분산에 사용하면 읽기 작업에서 보다 고가용성을 가져올 수 있음.

5. 레플리카 세트와 샤딩의 차이점을 설명하고, 두 기능을 함께 사용할 경우의 장점에 대해 서술하세요.
  -> 샤딩은 수평적 확장을 목적으로 하고, 레플리카 세트는 고가용성 및 내결함성을 목적으로 한다. 
    두 기능을 함께 사용할 경우 고가용성 및 수평적 확장을 동시에 제공할 수 있게 된다.

